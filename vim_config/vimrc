" Notes {
" vim: set sw=4 ts=4 sts=4 et tw=78 foldmarker={,} foldlevel=0 foldmethod=marker spell:
"
"   Joe's vimrc
"
" }

" Load Plugins by Vundle { 
    set nocompatible              " be iMproved, required
    filetype off                  " required

    " set the runtime path to include Vundle and initialize
    set rtp+=~/.vim/bundle/Vundle.vim
    call vundle#begin()
    " alternatively, pass a path where Vundle should install plugins
    "call vundle#begin('~/some/path/here')

    " let Vundle manage Vundle, required
    Plugin 'VundleVim/Vundle.vim'

    " The following are examples of different formats supported.
    " Keep Plugin commands between vundle#begin/end.
    " plugin on GitHub repo
    Plugin 'kien/ctrlp.vim' "fuzzy search files
    Plugin 'mbbill/undotree'
    Plugin 'sirver/ultisnips'
    Plugin 'majutsushi/tagbar'
    Plugin 'godlygeek/tabular'
    Plugin 'bling/vim-airline'
    Plugin 'tpope/vim-surround'
    Plugin 'tpope/vim-fugitive'
    Plugin 'scrooloose/nerdtree'
    Plugin 'vim-latex/vim-latex'
    "Plugin 'scrooloose/syntastic'
    Plugin 'scrooloose/nerdcommenter'
    Plugin 'easymotion/vim-easymotion'
    Plugin 'myusuf3/numbers.vim'
    " plugin from http://vim-scripts.org/vim/scripts.html
    Plugin 'matchit.zip'
    " Git plugin not hosted on GitHub
    "Plugin 'git://git.wincent.com/command-t.git'
    "Plugin 'git://git.code.sf.net/p/vim-latex/vim-latex'
    " git repos on your local machine (i.e. when working on your own plugin)
    "Plugin 'file:///home/gmarik/path/to/plugin'
    " The sparkup vim script is in a subdirectory of this repo called vim.
    " Pass the path to set the runtimepath properly.
    "Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}  "HTML related
    " Avoid a name conflict with L9
    "Plugin 'user/L9', {'name': 'newL9'}

    " All of your Plugins must be added before the following line
    call vundle#end()            " required
    filetype plugin indent on    " required
    " To ignore plugin indent changes, instead use:
    "filetype plugin on
    "
    " Brief help
    " :PluginList       - lists configured plugins
    " :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
    " :PluginSearch foo - searches for foo; append `!` to refresh local cache
    " :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
    "
    " see :h vundle for more details or wiki for FAQ
    " Put your non-Plugin stuff after this line
" }

" Environment {
    "set the runtimepath
    set runtimepath+=~/.vim
" }

" General {
    
    set background=dark     " Assume a dark background
    syntax on               " Syntax highlighting
    set mouse=a             " Enable mouse
    set mousehide           " Hide the mouse cursor while typing
    scriptencoding uif-8
    set virtualedit=onemore             " Allow for cursor beyond last character
    set history=1000                    " Store a ton of history (default is 20)
    set spell                           " Spell checking on

""highlight the current line
"autocmd InsertLeave * se nocul
"autocmd InsertEnter * se cul

""set the match time is one tenth second  
"set matchtime=1  



" }

" Vim UI {

    set tabpagemax=15               " Only show 15 tabs
    set showmode                    " Display the current mode
    set cursorline                  " Highlight current line
    set transparency=10             " Set windows transparency
    "set guifont=Source_Code_Pro_for_Powerline:h15       " Set the font
    set guifont=Input_Mono_Narrow:h14
    set t_Co=256                    " Set the 256 color
    "let g:molokai_original = 1	"original monokai background color
    set hlsearch                    " Highlight search terms
    set incsearch                   " Search when typing
    set scrolloff=3                 " Minimum lines to keep above and below cursor
    set showmode                    " Display the current mode
    set confirm                     " Show confirm window when not saved
    set showmatch                   " Show matching brackets/parenthesis
    set ignorecase                  " Case insensitive search
    set smartcase                   " Case sensitive when uc present
    set wildmenu                    " Show list instead of just completing
    set wildmode=list:longest,full  " Command <Tab> completion, list matches, then longest common part, then all.
    set foldenable                  " Auto fold code

" }

" Formatting {

    "set nowrap                      " Do not wrap long lines
	set linebreak					" Wrap by words instead of characters
    set autoindent                  " Indent at the same level of the previous line
	set smartindent					" Smard indent
	set cindent  					" Set the c language indent format  
    set shiftwidth=4                " Use indents of 4 spaces
    set tabstop=4                   " An indentation every four columns
    set softtabstop=4               " Let backspace delete indent
    set splitright                  " Puts new vsplit windows to the right of the current
    set splitbelow                  " Puts new split windows to the bottom of the current
    set number  					" Show the line number  
    set relativenumber              " Show the relative number
	set ruler						" Set show status on  
 
" }

" Key (re)Mappings {
	
	let mapleader=","
	nmap <leader>nt :NERDTree<CR>
	nmap <leader>cp :CtrlP<CR>
	nmap <leader>tb :TagbarToggle<CR>	

	nmap <space> za

    imap jj <Esc>
    vmap jj <Esc>
	" Latex related {
	nmap <F2> :w<CR><Leader>ll
    imap <F2> <ESC>:w<CR><Leader>ll
    nmap <F3> <Leader>lv
    imap <F3> <Leader>lv
	imap <C-b> <Plug>Tex_MathBF
	imap <C-c> <Plug>Tex_MathCal
	imap <C-l> <Plug>Tex_LeftRight
	imap <leader>it <Plug>Tex_InsertItemOnThisLine
    " }

    " Undotree related {
    nmap <leader>ut :UndotreeToggle<CR>
    " }

    " Tabular related {
    nmap <Leader>a= :Tabularize /=<CR>
    vmap <Leader>a= :Tabularize /=<CR>
    nmap <Leader>a: :Tabularize /:\zs<CR>
    vmap <Leader>a: :Tabularize /:\zs<CR>
    nmap <Leader>a& :Tabularize /&<CR>
    vmap <Leader>a& :Tabularize /&<CR>
    " }
" }

" Plugins {
"

    " UltiSnips {
        " Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
        let g:UltiSnipsExpandTrigger="<tab>"
        let g:UltiSnipsJumpForwardTrigger="<c-b>"
        let g:UltiSnipsJumpBackwardTrigger="<c-z>"

        " If you want :UltiSnipsEdit to split your window.
        let g:UltiSnipsEditSplit="vertical"

    " }

    " NerdTree {
        if isdirectory(expand("~/.vim/bundle/nerdtree"))
            map <C-e> <plug>NERDTreeTabsToggle<CR>
            nmap <leader>nt :NERDTreeFind<CR>

            let NERDTreeShowBookmarks=1
            let NERDTreeIgnore=['\.py[cd]$', '\~$', '\.swo$', '\.swp$', '^\.git$', '^\.hg$', '^\.svn$', '\.bzr$']
            let NERDTreeChDirMode=0
            let NERDTreeQuitOnOpen=1
            let NERDTreeMouseMode=2
            let NERDTreeShowHidden=1
            let NERDTreeKeepTreeInNewTab=1
            let g:nerdtree_tabs_open_on_gui_startup=0
        endif
    " }

    " vim-airline {
        set laststatus=2						" Show statusline all the time
        let g:airline_powerline_fonts = 1		" Use powerline symbols
        "let g:airline_theme='solarized'
    " }

    " Latex-suite {
        " IMPORTANT: grep will sometimes skip displaying the file name if you
        " search in a singe file. This will confuse Latex-Suite. Set your grep
        " program to always generate a file-name.
        set grepprg=grep\ -nH\ $*
        " OPTIONAL: Starting with Vim 7, the filetype of empty .tex files defaults to
        " 'plaintex' instead of 'tex', which results in vim-latex not being loaded.
        " The following changes the default filetype back to 'tex':
        let g:tex_flavor='latex'
        " Change default target to pdf, if not dvi is used
        let g:Tex_DefaultTargetFormat = 'pdf'
        " Setup the compile rule for pdf to use pdflatex with synctex enabled
"        let g:Tex_CompileRule_dvi = 'latex --interaction=nonstopmode $*'
        "let g:Tex_CompileRule_ps = 'dvips -Pwww -o $*.ps $*.dvi'
        "let g:Tex_CompileRule_pspdf = 'ps2pdf $*.ps'
        "let g:Tex_CompileRule_dvipdf = 'dvipdfm $*.dvi'
        let g:Tex_CompileRule_pdf = 'pdflatex -synctex=1 --interaction=nonstopmode $*'
        " PDF display rule 
        let g:Tex_DefaultTargetFormat = 'pdf'
        " IMAP()
        "augroup MyIMAPs
            "au!
               "au VimEnter * call IMAP('NOM', '\nomenclature{<++>}<++>', 'tex')
        "augroup END
 
         
"        let g:Tex_ViewRule_dvi = 'texniscope'
        "let g:Tex_ViewRule_ps = 'Preview'
        "let g:Tex_ViewRule_pdf = 'Skim'
         
"        let g:Tex_FormatDependency_ps  = 'dvi,ps'
        "let g:Tex_FormatDependency_pspdf = 'dvi,ps,pspdf'
        "let g:Tex_FormatDependency_dvipdf = 'dvi,dvipdf'
    " }

    " Syntastic {
        set statusline+=%#warningmsg#
        set statusline+=%{SyntasticStatuslineFlag()}
        set statusline+=%*

        let g:syntastic_always_populate_loc_list = 1
        let g:syntastic_auto_loc_list = 1
        let g:syntastic_check_on_open = 1
        let g:syntastic_check_on_wq = 0
    " }

" }
